go

14:03 30 Nov 2019
Tags: golang

Pallat Anchaleechamaikorn
golang developer
Technical Coach

yod.pallat@gmail.com
https://github.com/pallat
https://github.com/goyod
https://github.com/pyod

https://tour.golang.org/
https://github.com/uber-go/guide

* Anonymous Function
.play ./example/functions/anonymous.go

#############################################

* First-Class Function
.background ./images/whitebg.png
.play ./example/functions/firstclass.go

#############################################

* Higher-Order Function
.background ./images/whitebg.png

.play ./example/functions/higher_order.go

#############################################

* Higher-Order Function
.background ./images/whitebg.png

.play ./example/functions/higher_order2.go

#############################################

* func type
.background ./images/whitebg.png

    type areaFunc func(float64, float64) float64 

#############################################

* defer

A defer statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/basic.go

#############################################

* defer
.background ./images/whitebg.png

defer is stack

.play ./example/defer/stack.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/func.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/anonymous.go

#############################################

* defer
.background ./images/whitebg.png

.play ./example/defer/try_catch.go

#############################################

* Exercise
.background ./images/whitebg.png

    Make an API to generate JWT token that will expired in 5 minutes

    GET http://localhost:8080/token

    response:

    {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    }

    Validate JWT in FizzBuzzHandler

    GET http://localhost:8080/fizzbuzz/3

    Header["Authorization"]: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    
#############################################

* method
.background ./images/whitebg.png

    type rectangle struct {
        width float64
        length float64
    }

    func (r rectangle) area() float64 {
        return r.width * r.length
    }

#############################################

* method with pointer receiver
.background ./images/whitebg.png

    type rectangle struct {
        width float64
        length float64
    }

    func (r *rectangle) area() float64 {
        return r.width * r.length
    }

#############################################

* method on primitive type
.background ./images/whitebg.png

    type text string

    func (t text) split(sep string) []string{
        return strings.Split(string(t), sep)
    }

#############################################

* Exercise
.background ./images/whitebg.png

change FizzBuzz to OOP style

    fb := fizzbuzz.New(15)
    fb.String()

#############################################

* interface{}
.background ./images/whitebg.png

empty interface

    var i interface{}

    i = 10
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = "ten"
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = struct {
        number int
        text string
    } {
        number: 10,
        text: "ten",
    }
    fmt.Printf("type is %T, value is %v\n", i, i)

    i = func() string {
        return "10"
    }
    fmt.Printf("type is %T, value is %v\n", i, i)

#############################################

* interface
.background ./images/whitebg.png

.play ./example/interface/static_type.go

#############################################

* interface: type assertion
.background ./images/whitebg.png

.play ./example/interface/assertions.go

#############################################

* switch
.background ./images/whitebg.png

.play ./example/fizzbuzz_switch.go

#############################################

* interface: type switch
.background ./images/whitebg.png

.play ./example/interface/switch_type.go

#############################################

* interface 
.background ./images/whitebg.png

To define a set of method signatures

    Interfaces specify behaviors. 
    An interface type defines a set 
    of methods:

    type Stringer interface {
        String() string
    }

`Interfaces` are `implemented` `implicitly`

#############################################

* interface: error

.background ./images/whitebg.png

    type error interface {
        Error() string
    }

#############################################

* interface
.background ./images/whitebg.png

*Interface* *names*

By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.

    type areaer interface {
        area() int
    }

#############################################

* Exercise

    add a new API random a number 1-100 and return FizzBuzz then test it

    GET http://localhost:8080/fizzbuzzr

    {
        "number": 30000,
        "message": "FizzBuzz"
    }

#############################################

* method on function

    type IntnFunc func(int) int

    func (fn IntnFunc) Intn(n int) int {
        return fn(n)
    }

#############################################

* Note

    Intn is interesting

#############################################

* goroutine

.background ./images/whitebg.png
.play ./example/go/routine.go /^func main/,

#############################################

* goroutine
.background ./images/whitebg.png

.play ./example/go/wait.go /^var wg /,

#############################################

* channel 
.background ./images/whitebg.png

keyword `chan`

    * no buffered channel
    * buffered channel

#############################################

* buffered channel
.background ./images/whitebg.png

.play ./example/channel/buffered.go /^func main/,

#############################################

* no buffered channel
.background ./images/whitebg.png

.play ./example/channel/signal.go /^func main/,

#############################################

* Exercise
    generate 10 random 16 bits and use 10 go-routine to encrypt it

#############################################

* Closure Function
.background ./images/whitebg.png
.play ./example/functions/closure.go

#############################################

* Closure Function
.background ./images/whitebg.png
.play ./example/functions/closure2.go /func main/,/} // END/

#############################################

* Exercise
.background ./images/whitebg.png

    Make a Wrapper for FizzBuzz handler to validate JWT
